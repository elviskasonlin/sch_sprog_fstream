#include<iostream>
#include<fstream>
#include<vector>
#include<iomanip>
#include<cmath>
using namespace std;vector<string>subjects;int totalStudents,totalSubj;bool isFileLoaded=false;class student{string name;vector<float>marks;float average;public:string getName(void){return name;}float getMark(int index){return marks[index];}float getAverage(void){return average;}void setName(string input_name){name=input_name;}void addMark(float input_mark){marks.push_back(input_mark);}void editMark(float input_mark,unsigned int index){marks[index]=input_mark;}void processAverage(void){float sum=0;for(int x=0;x<(int)marks.size();x++){sum+=getMark(x);}average=sum/marks.size();}};struct stdDeviation{float stdD;};struct averages{unsigned int counterPasses,counterFailures,counterDistinctions;vector<string>namesPasses,namesFailures,namesDistinctions;};struct stdDeviation tempSD;struct averages tempAvg;unsigned short int getMenuChoice(string argcs){unsigned short int choice;cout<<argcs;cin>>choice;return choice;}string getInputString(string argcs){string input;cout<<argcs;cin>>input;return input;}void loadFile(vector<student>&data){cout<<"\n----------\nFILE LOADING\n----------\n"<<endl;string fileName;cout<<"\nEnter file name for input : ";cin>>fileName;cin.clear();cout<<"*****Trying to find : \""<<fileName<<"\""<<endl;ifstream fin;fin.open(fileName.c_str());if(fin.fail()){cout<<"*****ERROR. No such file or directory."<<endl;cin.clear();char choice;cout<<"Do you wish to load another file? Y to Load."<<endl<<"Your choice : ";cin>>choice;if(choice=='y'||choice=='Y'){loadFile(data);}else{return;}}else{isFileLoaded=true;fin>>totalStudents>>totalSubj;fin.ignore();for(int ia=0;ia<totalSubj;ia++){string temp;getline(fin,temp);subjects.push_back(temp);}fin.ignore();for(int ib=0;ib<totalStudents;ib++){student buffer;string name;float temp;getline(fin,name);buffer.setName(name);for(int ic=0;ic<totalSubj;ic++){fin>>temp;buffer.addMark(temp);}buffer.processAverage();data.push_back(buffer);fin.ignore();}cout<<"*****File \""<<fileName<<"\" loaded successfully!"<<endl;cout<<"Total number of students : "<<data.size()<<endl<<endl;}fin.close();}void calcStdD(vector<student>&data,unsigned short int choice,bool shouldCout,int sChoice){if(choice==1){if(shouldCout==true){cout<<"\n-----2.2.1 Overall Standard Deviation-----\n";}float sum=0.0,mean=0.0,stdD=0.0,top=0.0;for(int i=0;i<totalStudents;i++){sum+=data[i].getAverage();}mean=sum/totalStudents;for(int ib=0;ib<totalStudents;ib++){top+=pow((data[ib].getAverage()-mean),2);}stdD=sqrt(top/totalStudents);if(shouldCout==true){cout<<"\n Standard Deviation : "<<stdD<<endl;}else{struct stdDeviation buf;buf.stdD=stdD;tempSD=buf;}}else if(choice==2){if(shouldCout==true){cout<<"\n-----2.2.2 Standard Deviation per Subject-----\n";}int subjChoice;if(shouldCout==true){string toShow="Available subjects for analysis :\n";for(int i=0;i<totalSubj;i++){toShow+=("["+to_string(i+1)+"] "+subjects[i]+"\n");}toShow+="Enter your choice : ";subjChoice=getMenuChoice(toShow);subjChoice-=1;}else{subjChoice=sChoice;}float sum=0.0,mean=0.0,stdD=0.0,top=0.0;for(int i=0;i<totalStudents;i++){sum+=data[i].getMark(subjChoice);}mean=sum/totalStudents;for(int ib=0;ib<totalStudents;ib++){top+=pow((data[ib].getMark(subjChoice)-mean),2);}stdD=sqrt(top/totalStudents);if(shouldCout==true){cout<<"\n Standard Deviation for "<<subjects[subjChoice]<<" : "<<stdD<<endl;}else{struct stdDeviation buf;buf.stdD=stdD;tempSD=buf;}}else{cout<<"\n\n*****Invalid Input!\n\n";}}void calcAvg(vector<student>&data,unsigned short int choice,bool shouldCout,int sChoice){if(choice==1){if(shouldCout==true){cout<<"\n-----2.1.1 Overall Averages-----\n";}unsigned int counterPasses=0,counterFailures=0,counterDistinctions=0;vector<string>namesPasses,namesFailures,namesDistinctions;for(int ia=0;ia<totalStudents;ia++){float temp=data[ia].getAverage();string tempName=data[ia].getName();if(temp>=50.0){counterPasses++;namesPasses.push_back(tempName);if(temp>=75.0){counterDistinctions++;namesDistinctions.push_back(tempName);}}else if(temp<50.0){counterFailures++;namesFailures.push_back(tempName);}}if(shouldCout==true){cout<<"Data analysis based on student's overall marks.\n"<<"\nNumber of Passes : "<<counterPasses<<"\nNumber of Failures : "<<counterFailures<<"\nNumber of Distinctions : "<<counterDistinctions<<endl;}else{struct averages buf;buf.counterPasses=counterPasses;buf.counterFailures=counterFailures;buf.counterDistinctions=counterDistinctions;buf.namesPasses=namesPasses;buf.namesFailures=namesFailures;buf.namesDistinctions=namesDistinctions;tempAvg=buf;}}else if(choice==2){if(shouldCout==true){cout<<"\n-----2.2.2 Averages per Subject-----\n";}int subjChoice;if(shouldCout==true){string toShow="Available subjects for analysis :\n";for(int i=0;i<totalSubj;i++){toShow+=("["+to_string(i+1)+"] "+subjects[i]+"\n");}toShow+="Enter your choice : ";subjChoice=getMenuChoice(toShow);subjChoice-=1;}else{subjChoice=sChoice;}unsigned int counterPasses=0,counterFailures=0,counterDistinctions=0;vector<string>namesPasses,namesFailures,namesDistinctions;for(int ia=0;ia<totalStudents;ia++){float temp=data[ia].getMark(subjChoice);string tempName=data[ia].getName();if(temp>=50.0){counterPasses++;namesPasses.push_back(tempName);if(temp>=75.0){counterDistinctions++;namesDistinctions.push_back(tempName);}}else if(temp<50.0){counterFailures++;namesFailures.push_back(tempName);}}if(shouldCout==true){cout<<"\nData for "<<subjects[subjChoice]<<endl<<"Number of Passes : "<<counterPasses<<"\nNumber of Failures : "<<counterFailures<<"\nNumber of Distinctions : "<<counterDistinctions<<endl;}else{struct averages buf;buf.counterPasses=counterPasses;buf.counterFailures=counterFailures;buf.counterDistinctions=counterDistinctions;buf.namesPasses=namesPasses;buf.namesFailures=namesFailures;buf.namesDistinctions=namesDistinctions;tempAvg=buf;}}else{cout<<"\n\n*****Invalid Input!\n\n";}}void displayMenu(){cout<<"\n----------\nAVAILABLE FUNCTIONS\n----------\n"<<endl;cout<<"1. Load Student Data File\n2. Display Statistics ...\n3. Raw Data Dump\n4. Output statistics ...\n0. EXIT PROGRAM\n";}void displayStats(vector<student>&data){unsigned short int choice,choiceType;cout<<"\n----------2. DISPLAY STATISTICS----------\n1. Averages...\n2. Standard Deviation...\n0.<<BACK\nEnter your choice : ";cin>>choice;switch(choice){case 1 : choiceType=getMenuChoice("\n-----2.1. Averages-----\nBased on :\n1. Overall Average Marks\n2. Per Subject\nEnter your choice : ");calcAvg(data,choiceType,true,0);break;case 2 : choiceType=getMenuChoice("\n-----2.2. Standard Deviation-----\nBased on :\n1. Overall Average Marks\n2. Per Subject\nEnter your choice : ");calcStdD(data,choiceType,true,0);break;default : break;}}void debug_displayData(vector<student>&data){cout<<"\n----------\nDATA DUMP\n----------\n"<<endl;cout<<"Total num of Students : "<<totalStudents<<" Total num of Subjects : "<<totalSubj<<endl;for(int i=0;i<totalStudents;i++){cout<<left<<setw(15)<<data[i].getName()<<setw(2)<<" "<<left<<setw(4)<<(float)data[i].getAverage();for(int ib=0;ib<totalSubj;ib++){cout<<setw(subjects[ib].length()+2)<<subjects[ib]<<" : "<<left<<setw(4)<<(float)data[i].getMark((unsigned int)ib);}cout<<endl;}}void outputFile(vector<student>&data,string fileName,bool shouldExcludeNames,bool shouldSaveNamesToSeparateFile){if(shouldExcludeNames==false&&shouldSaveNamesToSeparateFile==false){ofstream fout;fout.open(fileName.c_str());if(fout.fail()){cout<<"*****ERROR. Can't output to file!"<<endl;return;}else{fout<<fileName<<"\nAdditional parameters : "<<"Excludes Names->FALSE\n Save names to separate file->FALSE"<<endl;calcAvg(data,1,false,0);calcStdD(data,1,false,0);fout<<"\n=============================="<<"\nAnalysis based on-OVERALL MARKS\n"<<"==============================\n";fout<<"\nNumber of Passes : "<<to_string(tempAvg.counterPasses)<<"\nNumber of Failures : "<<to_string(tempAvg.counterFailures)<<"\nNumber of Distinctions : "<<to_string(tempAvg.counterDistinctions)<<"\nStandard Deviation : "<<to_string(tempSD.stdD)<<endl;fout<<"\nStudents who Passed : "<<endl;for(int xa=0;xa<(int)tempAvg.namesPasses.size();xa++){fout<<to_string(xa)<<" "<<tempAvg.namesPasses[xa]<<",";}fout<<"\nStudents who Failed : "<<endl;for(int xb=0;xb<(int)tempAvg.namesFailures.size();xb++){fout<<to_string(xb)<<" "<<tempAvg.namesFailures[xb]<<",";}fout<<"\nStudents who scored Distinctions : "<<endl;for(int xc=0;xc<(int)tempAvg.namesDistinctions.size();xc++){fout<<to_string(xc)<<" "<<tempAvg.namesDistinctions[xc]<<",";}fout<<"\n\n=============================="<<"\nAnalysis based on-EACH SUBJECT\n"<<"==============================\n";for(int ia=0;ia<totalSubj;ia++){fout<<endl<<endl<<subjects[ia]<<endl<<string(subjects[ia].length(),'-')<<endl;calcAvg(data,2,false,ia);calcStdD(data,2,false,ia);fout<<"Number of Passes : "<<to_string(tempAvg.counterPasses)<<"\nNumber of Failures : "<<to_string(tempAvg.counterFailures)<<"\nNumber of Distinctions : "<<to_string(tempAvg.counterDistinctions)<<"\nStandard Deviation : "<<to_string(tempSD.stdD)<<endl;fout<<"\nStudents who Passed : "<<endl;for(int xa=0;xa<(int)tempAvg.namesPasses.size();xa++){fout<<to_string(xa)<<" "<<tempAvg.namesPasses[xa]<<",";}fout<<"\nStudents who Failed : "<<endl;for(int xb=0;xb<(int)tempAvg.namesFailures.size();xb++){fout<<to_string(xb)<<" "<<tempAvg.namesFailures[xb]<<",";}fout<<"\nStudents who scored Distinctions : "<<endl;for(int xc=0;xc<(int)tempAvg.namesDistinctions.size();xc++){fout<<to_string(xc)<<" "<<tempAvg.namesDistinctions[xc]<<",";}}}fout.close();}else if(shouldExcludeNames==true&&shouldSaveNamesToSeparateFile==false){ofstream fout;fout.open(fileName.c_str());if(fout.fail()){cout<<"*****ERROR. Can't output to file!"<<endl;return;}else{fout<<fileName<<"\nAdditional parameters : "<<"Excludes Names->TRUE\n"<<endl;calcAvg(data,1,false,0);calcStdD(data,1,false,0);fout<<"\n=============================="<<"\nAnalysis based on-OVERALL MARKS\n"<<"==============================\n";fout<<"\nNumber of Passes : "<<to_string(tempAvg.counterPasses)<<"\nNumber of Failures : "<<to_string(tempAvg.counterFailures)<<"\nNumber of Distinctions : "<<to_string(tempAvg.counterDistinctions)<<"\nStandard Deviation : "<<to_string(tempSD.stdD)<<endl;fout<<"\n\n=============================="<<"\nAnalysis based on-EACH SUBJECT\n"<<"==============================\n";for(int ia=0;ia<totalSubj;ia++){fout<<endl<<endl<<subjects[ia]<<endl<<string(subjects[ia].length(),'-')<<endl;calcAvg(data,2,false,ia);calcStdD(data,2,false,ia);fout<<"Number of Passes : "<<to_string(tempAvg.counterPasses)<<"\nNumber of Failures : "<<to_string(tempAvg.counterFailures)<<"\nNumber of Distinctions : "<<to_string(tempAvg.counterDistinctions)<<"\nStandard Deviation : "<<to_string(tempSD.stdD)<<endl;}}fout.close();}else if(shouldExcludeNames==false&&shouldSaveNamesToSeparateFile==true){ofstream fout1;fout1.open(fileName.c_str());fout1<<fileName<<"\nAdditional parameters : "<<"Save Names to a Separate File->TRUE\n"<<endl;if(fout1.fail()){cout<<"*****ERROR. Can't output to file!"<<endl;return;}else{calcAvg(data,1,false,0);calcStdD(data,1,false,0);fout1<<"\n=============================="<<"\nAnalysis based on-OVERALL MARKS\n"<<"==============================\n";fout1<<"\nNumber of Passes : "<<to_string(tempAvg.counterPasses)<<"\nNumber of Failures : "<<to_string(tempAvg.counterFailures)<<"\nNumber of Distinctions : "<<to_string(tempAvg.counterDistinctions)<<"\nStandard Deviation : "<<to_string(tempSD.stdD)<<endl;fout1<<"\n\n=============================="<<"\nAnalysis based on-EACH SUBJECT\n"<<"==============================\n";for(int ia=0;ia<totalSubj;ia++){fout1<<endl<<endl<<subjects[ia]<<endl<<string(subjects[ia].length(),'-')<<endl;calcAvg(data,2,false,ia);calcStdD(data,2,false,ia);fout1<<"Number of Passes : "<<to_string(tempAvg.counterPasses)<<"\nNumber of Failures : "<<to_string(tempAvg.counterFailures)<<"\nNumber of Distinctions : "<<to_string(tempAvg.counterDistinctions)<<"\nStandard Deviation : "<<to_string(tempSD.stdD)<<endl;}}fout1.close();ofstream fout2;fout2.open(("names_"+fileName).c_str());if(fout2.fail()){cout<<"*****ERROR. Can't output to file!"<<endl;return;}else{fout2<<"names_"+fileName<<"\nAdditional parameters : "<<"Separate Names Output->TRUE\n"<<endl;calcAvg(data,1,false,0);calcStdD(data,1,false,0);fout2<<"\n=============================="<<"\nAnalysis based on-OVERALL MARKS\n"<<"==============================\n";fout2<<"\nStudents who Passed : "<<endl;for(int xa=0;xa<(int)tempAvg.namesPasses.size();xa++){fout2<<to_string(xa)<<" "<<tempAvg.namesPasses[xa]<<",";}fout2<<"\nStudents who Failed : "<<endl;for(int xb=0;xb<(int)tempAvg.namesFailures.size();xb++){fout2<<to_string(xb)<<" "<<tempAvg.namesFailures[xb]<<",";}fout2<<"\nStudents who scored Distinctions : "<<endl;for(int xc=0;xc<(int)tempAvg.namesDistinctions.size();xc++){fout2<<to_string(xc)<<" "<<tempAvg.namesDistinctions[xc]<<",";}fout2<<"\n\n=============================="<<"\nAnalysis based on-EACH SUBJECT\n"<<"==============================\n";for(int ia=0;ia<totalSubj;ia++){fout2<<endl<<endl<<subjects[ia]<<endl<<string(subjects[ia].length(),'-')<<endl;fout2<<"\nStudents who Passed : "<<endl;for(int xa=0;xa<(int)tempAvg.namesPasses.size();xa++){fout2<<to_string(xa)<<" "<<tempAvg.namesPasses[xa]<<",";}fout2<<"\nStudents who Failed : "<<endl;for(int xb=0;xb<(int)tempAvg.namesFailures.size();xb++){fout2<<to_string(xb)<<" "<<tempAvg.namesFailures[xb]<<",";}fout2<<"\nStudents who scored Distinctions : "<<endl;for(int xc=0;xc<(int)tempAvg.namesDistinctions.size();xc++){fout2<<to_string(xc)<<" "<<tempAvg.namesDistinctions[xc]<<",";}}}fout2.close();}else{cout<<"*****ERROR. Invalid Argument!"<<endl;}}int main(){vector<student>data;unsigned short int menuChoice=1,choice;string fileName;cout<<endl<<"DATA ANALYSIS PROGRAMME V1.0.0r"<<endl<<"Written by Py,Tanaaz,Hou Wei,Nadine,Eleena"<<endl<<"-------------------------------\n\n";while(menuChoice!=0){displayMenu();menuChoice=getMenuChoice("Enter your choice : ");switch(menuChoice){case 0 : cout<<"/!\\ EXITING PROGRAM"<<endl;break;case 1 : loadFile(data);break;case 2 : displayStats(data);break;case 3 : debug_displayData(data);break;case 4 :cout<<"\n----------4. FILE OUTPUT----------\n"<<"\n OPTIONS \n=========\n[1] Standard\n[2] Exclude Names\n[3] Save names to separate file";choice=getMenuChoice("\nEnter your choice : ");fileName=getInputString("\nEnter your choice of output file name : ");if(choice==1){outputFile(data,fileName,false,false);}else if(choice==2){outputFile(data,fileName,true,false);}else if(choice==3){outputFile(data,fileName,false,true);}else{cout<<"*****ERROR. Invalid Choice."<<endl;}break;default : break;}}return 0;}